@page "/people"
@using System.IO
@using System.Text.Json
@inject HttpClient http
@inject IJSRuntime js

<h3>People</h3>

<AuthorizeView>
    <Authorized>
        <div class="form-group">
            <a class="btn btn-success" href="people/create">New Person</a>
        </div>
    </Authorized>
</AuthorizeView>

<div class="form-inline">
    <label class="sr-only" for="filter-name">Filter</label>
    <input type="text" class="form-control mb-2 mr-sm-2" @bind="nameFilter" placeholder="Filter by name"/> 
    <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="Filter">Filter</button>
    <button type="button" class="btn btn-danger mr-sm-2 mb-2" @onclick="Clear">Clear</button>
</div>

<Pagination TotalPagesQuantity="totalPageQuantity" CurrentPage="currentPage" Radius="2" SelectedPage="SelectedPage" ></Pagination>
<GenericList Elements="people">
    <NullTemplate>
        <img src="https://media.giphy.com/media/LjbuvHXvzorjG/giphy.gif"/>
    </NullTemplate>
    <WithElementsTemplate>
        <table class="table">
            <thead>
            <tr>
                <th></th>
                <th>Id</th>
                <th>Name</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var person in people)
            {
                <tr>
                    <td>
                        <AuthorizeView>
                            <Authorized>
                                <a class="btn btn-success" href="people/edit/@person.Id">Edit</a>
                                <button class="btn btn-danger" @onclick="@(() => DeletePerson(person.Id))">Delete</button>
                            </Authorized>
                        </AuthorizeView>
                    </td>
                    <td>@person.Id</td>
                    <td>@person.Name</td>
                </tr>

            }
            </tbody>
        </table>
    </WithElementsTemplate>
</GenericList>


@code {
    List<Person> people { get; set;  }
    private int totalPageQuantity;
    private int currentPage = 1 ;
    private string nameFilter = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        await LoadPeople();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadPeople(page);
    }

    private async Task Filter()
    {
        currentPage = 1;
        await LoadPeople();
    }

    private async Task Clear()
    {
        nameFilter = string.Empty;
        currentPage = 1;
        await LoadPeople();
    }

    async Task LoadPeople(int page = 1, int quantityPerPage = 10 )
    {
        //await Task.Delay(4000);
        var httpResponse = await http.GetAsync($"api/people?page={page}&quantityPerPage={quantityPerPage}&name={nameFilter}");
        if (httpResponse.IsSuccessStatusCode)
        {
            totalPageQuantity = int.Parse(httpResponse.Headers.GetValues("pagesQuantity").FirstOrDefault());
            var responseString = await httpResponse.Content.ReadAsStringAsync();

            people = JsonSerializer.Deserialize<List<Person>>(responseString, new JsonSerializerOptions() {PropertyNameCaseInsensitive = true});
        }
        else
        {
            //handle Error
        }
    }

    async Task DeletePerson(int personId)
    {
        //await js.DisplayMessage("my title","My Message", SweetAlertMessageType.success);
        var personSelected = people.First(x => x.Id == personId);
        if (await js.Confirm("Confirm", $"Do you want to delete {personSelected.Name}?",SweetAlertMessageType.question))
        {
            await http.DeleteAsync($"api/people/{personId}");
            await LoadPeople();
        }

    }

    private void ExportAsCSV()
    {
        using (var memoryStream = new MemoryStream())
        {
            using (var writer = new StreamWriter(memoryStream))
            {
                using (var csv = new CsvHelper.CsvWriter(writer,System.Globalization.CultureInfo.CurrentCulture))
                {
                    csv.WriteRecords(people);
                }

                var arr = memoryStream.ToArray();
                js.SaveAs("people.csv",arr);
            }
        }
    }
}
